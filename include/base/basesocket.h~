
#ifndef _LS_BASE_SOCKET_H
# define _LS_BASE_SOCKET_H

#include <functional>
#include <memory>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <netinet/in.h>

#include "addr.h"

namespace lsock
{
namespace base
{

    template <int (*_ConnectFunc)(int, struct sockaddr *, socklen_t), typename _AddrType>
    class BaseSocket
    {
    public:
	BaseSocket() = delete;
	BaseSocket(int family, int type, int proto = 0);
	BaseSocket(int sfd);
	virtual ~BaseSocket();

	int connects(lsock::base::BaseSockAddr<_AddrType> *addr);

	ssize_t simple_write(char *data, size_t len, int flags = 0);
	ssize_t simple_read(char *data, size_t len, int flags = 0);

	void disconnect();
	
    protected:
	int m_sockfd;
	std::shared_ptr<BaseSockAddr<_AddrType>> m_addr;
	std::function<int()> m_connector;
	
    };
}
}

#endif // _LS_BASE_SOCKET_H
