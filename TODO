
This file contains steps to be taken and features to be added to the program.
    Copyright (C) 2017 Charlie Sale

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
(Versioning begin at major when package is accepted...)

Phase 1 -- Complete basic Socket I/O functionality. First Release (major version 1.x.x)
---------------------------------------------------------------------------------------
[done] *.  Create a basic TCP socket system based off of C++ I/O
[done] *.  Add more options to make basic_socket more dynamic with getopt/setopt
[done] *.  Add `getpeername()` capabilites to basic_socket
[done] *.  Override formatted output for integer and numbers
[done] *.  Add `getPort()` function
[done] *.  Make socket connect in basic_socket constructor
[done] *.  Add reuseAddress and keepAlive options on server
[done] *   Write exception for constructors (errno already supplied: use default C socket values)
[done] *.  Add texinfo automake build proceedure
[    ] *.  Continuously update texinfo docs

Phase 2 -- Implement shell interface of library. Second Major release (major version 2.x.x)
-------------------------------------------------------------------------------------------
[    ] *.  Create `sockpp` command, which opens up a command shell for creating sockets
[    ] *.  Socket/Server commands
[    ]          *. `server` -- creates a new server
[    ]          *. `socket` -- creates a new socket
[    ]          *. `binds/connects` -- binds/connects each specific socket
[    ]          *. `send/recv` -- send and recieve functionality
[    ]          *. `quit` -- close function

Phase 3 -- Implement socketpp shell language, `sockp`. Third Major release (major version 3.x.x)
----------------------------------------------------------------------------------------
[    ] *.  Use bison to create an interpreter called `socki`
[    ] *.       *. Use file extension '.spp'
[    ] *.  Functionality for socket creation, usage, etc.
[    ] *.  Make emacs mode for shell language in elisp

Phase 4 -- Implement security protocols Fourth Major Release (major version 4.x.x)
----------------------------------------------------------------------------------
[    ] *.  Implement security protocols
[    ]          *. Options: GNU TLS, GNU SASL, *GSS*
[    ] *.  Add new exceptions
[    ] *.  Add compression with zlib?
[    ] *.  Add Asynchronous accept method for Server class
[    ] *.  Create an object stream for sending base objects


Future -- Implement standard internet protocols
-------------------------------------------------------------------------------------------
NOTE: Must be complient with RFC
[    ] *.  UDP
[    ] *.  TELNET
[    ] *.  FTP
