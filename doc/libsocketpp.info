This is libsocketpp.info, produced by makeinfo version 6.3 from
libsocketpp.texi.

This manual is for libsocketpp, 0.2

   Copyright (C) 2017 Charlie Sale

     Permission is granted to GNU


File: libsocketpp.info,  Node: Top,  Next: Overview,  Up: (dir)

A Guide to Libsocketpp
**********************

The C++ Library 'libsocketpp' contains multiple top level and base
classes built on top of the C++ standard I/O system.  This allows the
user of the library to use sockets like they would use cout or cin.

   The program 'sockp' is a shell interface for the socketpp library.
The purpose of this program is to allow socket functionality in the
terminal, where it might be useful.

   The scriping language 'socki' is an interpreter for a scriping
language that allows shell socket functionality, but in a script instead
of direct user input.

* Menu:

* Overview::
* Tutorial::
* Extending::
* Index::


File: libsocketpp.info,  Node: Overview,  Next: Tutorial,  Prev: Top

1 Overview
**********

Welcome to Libsocketpp, the C++ socket library based on the standard C++
I/O system.  Because it is built on top of the standard C++ I/O system,
sockets behave the same way as an 'istream' or 'ostream' would work.
Lets go over what that means exactly.

   By saying that libsocketpp is built on top of the C++ standard I/O
system, I mean that it inherits standard classes included in the
standard C++ library that are built for I/O functionality.  Classes like
'cout' and 'cin' are built on the same systems.  The specific classes
that libsocketpp are built on are 'streambuf', which is a typedef of
'basic_streambuf', and 'iostream', which is a typedef of
'basic_iostream'.  Let's cover what these classes do, and then how they
relate to libsocketpp.

   Let's start with the class 'iostream'.  This class is whats known as
a stream.  A stream is a device that formats and transports data over a
connection.  This means that it physically reads and writes data between
two places.  The class 'iostream' both reads and writes data via methods
inherited from 'istream' and 'ostream'.  As said earlier, a stream only
moves data, which means that we are missing a part of the system: the
buffer.

   A buffer, embodied in the class 'streambuf', is the location in
memory in which data is stored to retrieved for sending and recieving.
When a stream writes data, it retrieves data from the the buffer and
outputs it to the destination.  Conversly, when a stream reads data, it
places retrieved data into the buffer.  Once this read data is placed in
the buffer, said data can be returned to the user.

   In order for a stream to use a buffer, a buffer is usually passed
into it's constructor.  In libsocketpp, both the buffer and stream are
combined into one class for easy usage.

   A question that you might have is "How does this I/O system relate to
sockets?"  Well, the type of socket primarily used in this library is a
Transmission Control Protocol (TCP) socket.  A TCP socket is itself a
stream.  This means that data is transfered over a connection through
blocking read and write commands.  Because TCP is a stream, it fits
perfectly into the C++ I/O system.


File: libsocketpp.info,  Node: Tutorial,  Next: Extending,  Prev: Overview

2 Tutorial
**********

Let's now talk about how to use this library.

* Menu:

* Acquring and Installing: Getting. How to get and install this package
* Compiling:: How to compile programs with this library
* Including:: Which files to include in your program
* Handling Errors: Errors. About errors in libsocketpp
* Constructors, Connecting, and Binding: Ctors. How to create useable objects and connect them
* Accepting Connections: Accepting. How to acccept connection from a server and user them
* Sending and Recieving Data: Sendrecv. How to properly send and recieve data across sockets
* Setting Options: Opts. How to set socket options.
* Closing Connections: Closing. How to close a connection


File: libsocketpp.info,  Node: Getting,  Next: Compiling,  Up: Tutorial

2.1 Acquring and Installing
===========================

* Menu:

* Acquring::
* Installing::


File: libsocketpp.info,  Node: Acquring,  Next: Installing,  Up: Getting

2.1.1 Acquiring
---------------


File: libsocketpp.info,  Node: Installing,  Prev: Acquring,  Up: Getting

2.1.2 Installing
----------------

Because this package follows standard GNU build proceedures, install
with the following steps:
  1. '$ cd libsocketpp-dir'

  2. '$ ./configure --prefix=install-prefix'

  3. '$ make'

  4. '# make install'


File: libsocketpp.info,  Node: Compiling,  Next: Including,  Prev: Getting,  Up: Tutorial

2.2 Compiling
=============

This library installs both a static and dynamic library.  If you want to
keep dependencies down or want to have a very portable program/library,
copy the static library ('prefix/lib/libsocketpp.a') into your project
directory and compile it it by doing

   '$ g++ file.cc libsocketpp.a -o executable'.

   If you want to compile with the dynamic library, then compile with
the flag '-lsocketpp'.  This is assuming that your prefix is part of the
standard library serach path of ld.


File: libsocketpp.info,  Node: Including,  Next: Errors,  Prev: Compiling,  Up: Tutorial

2.3 Including
=============

All libsocketpp headers are found in the directory 'socketpp/' in your
prefix include directory.  From there, classes are broken down by
specific function or protocol.  Both the 'Socket' and 'Server' classes
are found int the 'tcp/' directory.  Note that these subdirectories
correspond with the classes namespace.  This means the 'Socket' is part
of the namespace 'tcp'.

   For example:
     #include <socketpp/tcp/socket.h>
     #include <socketpp/tcp/server.h>

     /* The rest of your project here */



File: libsocketpp.info,  Node: Errors,  Next: Ctors,  Prev: Including,  Up: Tutorial

2.4 Handling Errors
===================

Errors in socketpp are fairly low level.  Most functions return an
integer value for testing if they do not already return some sort of
other data type.  Generally, a function will return a negative value
(i.e -1).  On success, most functions return '0' on success, so to test,
you can write:

     int ret = socket_function();
     if (ret != 0){
        // handle error
     }

   For more specific error handling, all standard C socket 'errno'
values are still set.  There are no new 'errno' values set by this
library: they just recycle what would already be set by the standard
system.  Look at the errno documentation at the website
'http://www.virtsync.com/c-error-codes-include-errno'.  This contains
the number and a brief description about each errno error value.

   The constructors for 'tcp::Socket' and 'tcp::Server' both throw the
'ctor_exe_t' exception when calling their constructors.  The constructor
does not inherently throw the exception, but if an error in encountered,
it will abort and dump the core.  Because of this, it is reconmended
that all constructor calls are acompnaied with a try/catch block.


File: libsocketpp.info,  Node: Ctors,  Next: Accepting,  Prev: Errors,  Up: Tutorial

2.5 Constructors, Connecting, and Binding
=========================================

Now, let's get into the actual classes and methods of libsocketpp.


File: libsocketpp.info,  Node: Accepting,  Next: Sendrecv,  Prev: Ctors,  Up: Tutorial

2.6 Accepting Connections
=========================


File: libsocketpp.info,  Node: Sendrecv,  Next: Opts,  Prev: Accepting,  Up: Tutorial

2.7 Sending and Recieving Data
==============================


File: libsocketpp.info,  Node: Opts,  Next: Closing,  Prev: Sendrecv,  Up: Tutorial

2.8 Setting Options
===================


File: libsocketpp.info,  Node: Closing,  Prev: Opts,  Up: Tutorial

2.9 Closing Connections
=======================


File: libsocketpp.info,  Node: Extending,  Next: Index,  Prev: Tutorial

3 Extending
***********


File: libsocketpp.info,  Node: Index,  Prev: Extending,  Up: Top

Index
*****



Tag Table:
Node: Top191
Node: Overview908
Node: Tutorial3171
Node: Getting3953
Node: Acquring4123
Node: Installing4232
Node: Compiling4551
Node: Including5156
Node: Errors5786
Node: Ctors7043
Node: Accepting7284
Node: Sendrecv7427
Node: Opts7579
Node: Closing7707
Node: Extending7826
Node: Index7926

End Tag Table
